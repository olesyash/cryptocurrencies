Olesya Sharify 319346565
Yaniv Ankri 208272773

## Description


## Explanation of Reentrancy attack
How the Wallet2 contract prevents reentrancy:

In the original vulnerable wallet:

'''
function sendTo(address payable destination) external {
    uint amount = userBalances[msg.sender];
    (bool success, ) = destination.call{value: amount}("");
    require(success);
    userBalances[msg.sender] = 0;  // State update AFTER external call
}
'''
Reentrancy Attack Sequence:

Attacker calls sendTo()
Contract sends funds via call()
Attacker's receive() function is triggered
Before balance is set to 0, attacker can call sendTo() again
Repeatedly drain more funds than originally in the account
The attack failed. Let me explain why:

In the Wallet2 contract, there's a key difference from the previous vulnerable wallet:

'''
function sendTo(address payable destination, uint amount) external {
    require(amount >= userBalances[msg.sender]);  // This line prevents the attack
    (bool success, ) = destination.call{value: amount}("");
    require(success);
    userBalances[msg.sender] -= amount;
}
'''
The require(amount >= userBalances[msg.sender]) check prevents the reentrancy attack by ensuring that:

The withdrawal amount cannot exceed the user's balance
The balance is checked BEFORE any funds are sent
This is a simple but effective mitigation against reentrancy attacks. The contract updates the state (checking balance) before performing the external call, which breaks the typical reentrancy pattern.


function sendTo(address payable destination) external {
    uint amount = userBalances[msg.sender];
    (bool success, ) = destination.call{value: amount}("");
    require(success);
    userBalances[msg.sender] = 0;  // State update AFTER external call
}
Reentrancy Attack Sequence:

Attacker calls sendTo()
Contract sends funds via call()
Attacker's receive() function is triggered
Before balance is set to 0, attacker can call sendTo() again
Repeatedly drain more funds than originally in the account

In Wallet2:

'''
function sendTo(address payable destination, uint amount) external {
    require(amount <= userBalances[msg.sender]);  // Check 1: Prevent overdrawing
    (bool success, ) = destination.call{value: amount}("");
    require(success);
    userBalances[msg.sender] -= amount;  // State update BEFORE external call
}
'''

Reentrancy Prevention Mechanisms:

Explicit amount parameter prevents sending entire balance automatically
require(amount <= userBalances[msg.sender]) ensures:
Cannot withdraw more than current balance
Checks balance BEFORE sending funds
Subtracts the exact amount from balance before external call
Uses subtraction instead of setting to zero, providing more granular control
This follows the "checks-effects-interactions" pattern:

CHECKS: Validate conditions
EFFECTS: Update contract state
INTERACTIONS: Perform external call
By updating the state before the external call, the contract prevents the attacker from calling the function again with the same balance, effectively blocking the reentrancy attack.